import Player from '../gameObjects/Player'
import Debugger from '../gameObjects/Debugger'
import Goomba from '../gameObjects/Goomba'
import Coin from '../gameObjects/Coin'
import Flag from '../gameObjects/Flag'

import image from "../assets/img/tiles.png";
import tilemap from "../assets/json/map.json";
import atlasPng from "../assets/img/mario-atlas.png";
import atlasJson from "../assets/json/mario-atlas.json";

import tiles from '../config/tiles'
import generateAnimations from '../config/animations'

class Game extends Phaser.Scene {

    constructor () {
        super('Game');
    }

    // Tileset by https://www.deviantart.com/thecrushedjoycon/art/Super-Mario-Bros-Mega-Tileset-Ver-2-842092790
    // Goombas are from https://mfgg.net/index.php?act=resdb&param=02&c=1&id=4200
    // Mario from https://www.mariomayhem.com/downloads/sprites/super_mario_bros_sprites.php
    // Atlas generated by https://gammafp.github.io/atlas-packer-phaser/editor
    preload() {
        this.load.image('tiles', image);
        this.load.tilemapTiledJSON('map', tilemap);
        this.load.atlas('atlas', atlasPng,atlasJson);

        this.load.atlas('atlas', './assets/mario-atlas.png', './assets/mario-atlas.json');

        this.load.on('complete', () => {
            generateAnimations(this);
        });
    }

    // class Player {
    //     constructor(scene, x, y) {
            
    //     }
    // }
    
    // export default Player;

    create() {
        const noCollisionTiles = [
            tiles.EMPTY,
            tiles.FLAG_LEFT
        ];

        this.map = this.make.tilemap({ key: 'map' });
        this.tileset = this.map.addTilesetImage('map-tileset', 'tiles');
        this.platform = this.map.createStaticLayer('platform', this.tileset, 0, 0);

        this.map.createStaticLayer('background', this.tileset, 0, 0);
        this.platform.setCollisionByExclusion(-1, true);

        this.player = new Player(this, 25, 400).collideWith(this.platform);
        this.goombas = new Goomba(this).collideWith(this.platform);
        this.coins = new Coin(this).collideWith(this.player.sprite);
        this.flag = new Flag(this);
        this.debugger = new Debugger(this);

        this.inputs = this.input.keyboard.createCursorKeys();

        this.physics.add.collider(player, platforms);

        this.anims.create({
            key: 'turn',
            frames: [ { key: 'dude', frame: 4 } ],
            frameRate: 20
        });
    
        this.anims.create({
            key: 'right',
            frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),
            frameRate: 10,
            repeat: -1
        });

        this.cursors = this.input.keyboard.createCursorKeys();


        
    }
    
    update() {
        this.player.update(this.inputs);
        this.goombas.update();
        this.coins.update();
        this.debugger.debuggerEnabled && this.debugger.update();

        console.log("update");

        if (this.cursors.left.isDown)
        {
            player.setVelocityX(-160);
    
            player.anims.play('left', true);
    
            enemies.setVelocityX(100)
        }
        else if (this.cursors.right.isDown)
        {
            player.setVelocityX(160);
    
            player.anims.play('right', true);
            
            enemies.setVelocityX(-100);
        }
    
        
        else
        {
            player.setVelocityX(0);
    
            player.anims.play('turn');
        }
    
        if (this.cursors.up.isDown && player.body.touching.down)
        {
            player.setVelocityY(-330);
        } 
    }
}

export default Game;